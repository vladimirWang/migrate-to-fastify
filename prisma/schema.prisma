generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PurchaseStatus {
  WAITING
  FINISHED
}

model Vendor {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  isDel     Boolean   @default(false)
  remark    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  img       String?
  products  Product[]
}

// 进货表
model Purchase {
  id                  Int                   @id @default(autoincrement())
  isDel               Boolean               @default(false)
  remark              String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  purchaseDate        DateTime              @db.Date
  totalCost           Int? // 总价
  purchaseStatus      PurchaseStatus        @default(WAITING) // 进货订单状态
  productJoinPurchase ProductJoinPurchase[]
  userId              Int
  user                User                  @relation(fields: [userId], references: [id])
  confirmDate         DateTime?             @db.Date // 确认收货日期
}

model Product {
  id                   Int                    @id @default(autoincrement())
  name                 String
  img                  String?
  vendorId             Int
  remark               String?
  balance              Int?                   @default(0) @db.UnsignedSmallInt
  isDel                Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  available            Boolean                @default(true) // 是否上架
  price                Int?                   @db.UnsignedSmallInt // 最新售价
  cost                 Int?                   @db.UnsignedSmallInt // 最新成本价
  vendor               Vendor                 @relation(fields: [vendorId], references: [id])
  productJoinPurchase  ProductJoinPurchase[]
  trolleyJoinProduct     TrolleyJoinProduct[] // 采购车中间表
  saleOrderJoinProduct SaleOrderJoinProduct[] // 出货商品中间表
  // saleTrolleyJoinProduct SaleTrolleyJoinProduct[]

  @@index([vendorId], map: "Product_brandId_fkey")
}

model User {
  id        Int         @id @default(autoincrement())
  email     String?     @unique
  username  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  password  String
  avatar    String?
  role      String      @default("staff")
  isDel     Boolean     @default(false)
  trolley   Trolley[]
  purchase  Purchase[]
  saleOrder SaleOrder[]
  //  saleTrolley SaleTrolley[]
}

model ProductJoinPurchase {
  productId  Int
  product    Product  @relation(fields: [productId], references: [id])
  purchaseId Int
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  cost  Int @db.UnsignedSmallInt // 最新成本价
  count Int @db.UnsignedSmallInt // 商品数量

  @@id([productId, purchaseId])
}

model Trolley {
  id                 Int                  @id @default(autoincrement())
  trolleyJoinProduct TrolleyJoinProduct[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  remark             String?
  userId             Int                  @unique
  user               User                 @relation(fields: [userId], references: [id])
}

model TrolleyJoinProduct {
  trolleyId Int
  trolley   Trolley @relation(fields: [trolleyId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  count     Int     @db.UnsignedSmallInt // 某个sku的采购数量
  cost      Int     @default(0) @db.UnsignedSmallInt // 成本价

  @@id([trolleyId, productId])
}

enum SaleStatus {
  TO_SHIP // 待发货
  TO_RECEIVE // 待收货
  CONFIRMED // 已完成
}

// model SaleTrolley {
//   id                     Int                      @id @default(autoincrement())
//   saleTrolleyJoinProduct SaleTrolleyJoinProduct[]
//   createdAt              DateTime                 @default(now())
//   updatedAt              DateTime                 @updatedAt
//   createdUserId          Int
//   createdUser            User                     @relation(fields: [createdUserId], references: [id])
// }

// model SaleTrolleyJoinProduct {
//   productId     Int
//   product       Product     @relation(fields: [productId], references: [id])
//   count         Int         @db.UnsignedSmallInt // 某个sku的采购数量
//   price         Int         @default(0) @db.UnsignedSmallInt // 成本价
//   saleTrolley   SaleTrolley @relation(fields: [saleTrolleyId], references: [id], onDelete: Cascade)
//   saleTrolleyId Int

//   @@id([saleTrolleyId, productId])
// }

// 出货表
model SaleOrder {
  id                   Int                    @id @default(autoincrement())
  totalPrice           Int?                   @db.UnsignedSmallInt
  purchaseDate         DateTime               @db.Date // 购买日期
  confirmDate          DateTime?              @db.Date // 确认收货日期
  platformId           Int?
  platform             Platform?              @relation(fields: [platformId], references: [id])
  platformOrderNo      String? // 平台订单号
  clientId             Int?
  client               Client?                @relation(fields: [clientId], references: [id])
  remark               String?
  status               SaleStatus             @default(TO_SHIP)
  saleOrderJoinProduct SaleOrderJoinProduct[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  // createdUserId        Int
  // createdUser          User                   @relation(fields: [createdUserId], references: [id])
  expressId            Int?
  express              Express?               @relation(fields: [expressId], references: [id]) // 快递公司
  expressNo            String? // 快递单号
  expressFee           Int?                   @db.TinyInt
  User                 User?                  @relation(fields: [userId], references: [id])
  userId               Int?
}

model SaleOrderJoinProduct {
  saleOrderId Int
  saleOrder   SaleOrder @relation(fields: [saleOrderId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  productId   Int
  product     Product   @relation(fields: [productId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  price       Int       @db.UnsignedSmallInt // 成交价
  count       Int       @db.UnsignedSmallInt // 数量

  @@id([saleOrderId, productId])
}

model Client {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(10)
  remark    String?
  badGuy    Boolean     @default(false) // 是否恶意退单用户
  saleOrder SaleOrder[]
}

// enum PlatformName {
//   XIANYU // 闲鱼
//   PINDUODUO // 拼多多
//   TAOBAO // 淘宝
//   DOUYIN // 抖音
// }

model Platform {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(20)
  saleOrder SaleOrder[]
}

// enum Express {
//   SHUNFENG // 顺丰  
//   ZHONGTONG // 中通
//   SHENTONG // 申通
//   YUNDA // 韵达
//   OTHER // 其他
// }

model Express {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(20)
  saleOrder SaleOrder[]
}
